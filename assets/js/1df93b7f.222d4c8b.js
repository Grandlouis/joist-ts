"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[237,11],{5318:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(g,i(i({ref:t},u),{},{components:a})):n.createElement(g,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3679:(e,t,a)=>{a.r(t),a.d(t,{default:()=>k});var n=a(1884),r=a(353),o=a(3829),i=a(8944),l=a(7378),s=a(7055);const c="features_xdhU",u="container_Pe1m";var d=a(2685),p=a(5318);const m={toc:[{value:"What Does using Joist Look Like?",id:"what-does-using-joist-look-like",level:2}]};function g(e){let{components:t,...a}=e;return(0,p.kt)("wrapper",(0,d.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"what-does-using-joist-look-like"},"What Does using Joist Look Like?"),(0,p.kt)("p",null,"Joist's docs dive into these features in more detail, but as a quick tldr..."),(0,p.kt)("p",null,"You start by creating/updating your database schema, using ",(0,p.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," or whatever migration library you like:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-shell"},"# Apply the latest migrations\nnpm run migrate\n# Now generate the updated domain model\nnpm run joist-codegen\n")),(0,p.kt)("p",null,"You get clean domain objects created automatically:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"class Author extends AuthorCodegen {\n  // Where you eventually add custom methods/business logic\n}\n")),(0,p.kt)("p",null,"You write validation rules that can be per-field, per-entity or cross-entity, i.e. in ",(0,p.kt)("inlineCode",{parentName:"p"},"Author.ts"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},'import { authorConfig as config } from "./entities";\n\n// Anytime an author gets a book added or removed (i.e. via code calling\n// `book.author.set(...)`), call this business rule.\nconfig.addRule("books", (author) => {\n  if (author.books.get.length > 10) {\n    return "Too many books";\n  }\n});\n')),(0,p.kt)("p",null,"You can load/save entities in a Unit of Work-style ",(0,p.kt)("inlineCode",{parentName:"p"},"EntityManager")," that will batch save any changes made during the current request (only after running all validation rules & updating any derived values):"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1 = em.load(Author, "a:1");\na1.firstName = "Allen";\na2.lastName = "Zed";\n// Runs validation, lifecycle hooks, and issues INSERTs/UPDATEs\nawait em.flush();\n')),(0,p.kt)("p",null,"You can use GraphQL-style deep preloading to de-",(0,p.kt)("inlineCode",{parentName:"p"},"await")," business logic:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},'// Use 1 await to preload a tree of data\nconst loaded = await a1.populate({\n  books: "reviews",\n  publisher: {},\n});\n\n// No more await Promise.all\nloaded.books.get.forEach((book) => {\n  book.reviews.get.forEach((review) => {\n    console.log(review.name);\n  });\n})\n')))}g.isMDXComponent=!0;l.Fragment,l.Fragment;function f(){return l.createElement("section",{className:c},l.createElement("div",{className:u+" container"},l.createElement("div",{className:"markdown"},l.createElement(s.default,null)),l.createElement("div",{className:"markdown"},l.createElement(g,null))))}const h="heroBanner_qdFl",v="button_JGCe";function y(){const{siteConfig:e}=(0,r.Z)();return l.createElement("header",{className:(0,i.Z)("hero hero--primary",h)},l.createElement("div",{className:"container"},l.createElement("h1",{className:"hero__title"},e.title),l.createElement("p",{className:"hero__subtitle"},e.tagline),l.createElement(n.Z,{to:"/docs/getting-started"},l.createElement("a",{className:v},"Get Started"))))}function k(){const{siteConfig:e}=(0,r.Z)();return l.createElement(o.Z,{title:`Hello from ${e.title}`,description:"Description will go into a meta tag in <head />"},l.createElement(y,null),l.createElement("main",null,l.createElement(f,null)))}},7055:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(2685),r=(a(7378),a(5318));const o={title:"Goals",slug:"/goals",sidebar_label:"Overview",sidebar_position:0},i=void 0,l={unversionedId:"goals/overview",id:"goals/overview",title:"Goals",description:"Joist's goal is to bring ActiveRecord-level productivity to TypeScript/Node projects.",source:"@site/docs/goals/overview.md",sourceDirName:"goals",slug:"/goals",permalink:"/docs/goals",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/goals/overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Goals",slug:"/goals",sidebar_label:"Overview",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"Code Generation",permalink:"/docs/goals/code-generation"}},s={},c=[],u={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Joist's goal is to bring ",(0,r.kt)("a",{parentName:"p",href:"https://guides.rubyonrails.org/active_record_basics.html"},"ActiveRecord"),"-level productivity to TypeScript/Node projects."),(0,r.kt)("p",null,"This is a lofty goal, and Joist has just started down that road, but that is the standard Joist strives for and ideally can surpass."),(0,r.kt)("p",null,"The major goals are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("a",{parentName:"li",href:"/docs/goals/code-generation"},"code generation")," to move fast and remove boilerplate"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/goals/avoiding-n-plus-1s"},"Avoid N+1s")," through first-class ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/graphql/dataloader"},"dataloader")," integration"),(0,r.kt)("li",{parentName:"ul"},"Differentiate ",(0,r.kt)("a",{parentName:"li",href:"/docs/goals/type-safe-relations"},"loaded vs. unloaded collections")," in the type system"),(0,r.kt)("li",{parentName:"ul"},"Enable ",(0,r.kt)("a",{parentName:"li",href:"/docs/goals/great-tests"},"great testing")," with built-in factories and other support"),(0,r.kt)("li",{parentName:"ul"},"Provide a variety of primitives of domain modeling options")))}d.isMDXComponent=!0}}]);