"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[185],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(2685),a=(n(7378),n(5318));const o={title:"Quick Tour",sidebar_position:0},i=void 0,s={unversionedId:"getting-started/tour",id:"getting-started/tour",title:"Quick Tour",description:"Joist's docs dive into these features in more detail, but as a quick tldr...",source:"@site/docs/getting-started/tour.md",sourceDirName:"getting-started",slug:"/getting-started/tour",permalink:"/docs/getting-started/tour",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/getting-started/tour.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Quick Tour",sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/docs/getting-started"}},l={},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Joist's docs dive into these features in more detail, but as a quick tldr..."),(0,a.kt)("p",null,"You start by creating/updating your database schema, using ",(0,a.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," or whatever migration library you like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Apply the latest migrations\nnpm run migrate\n# Now generate the updated domain model\nnpm run joist-codegen\n")),(0,a.kt)("p",null,"You get clean domain objects created automatically:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/entities/Author.ts\nexport class Author extends AuthorCodegen {\n  // Where you eventually add custom methods/business logic\n}\n")),(0,a.kt)("p",null,"You write validation rules that can be per-field, per-entity or cross-entity, i.e. in ",(0,a.kt)("inlineCode",{parentName:"p"},"Author.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { authorConfig as config } from "./entities";\n\nexport class Author extends AuthorCodegen {\n}\n\n// Anytime an author gets a book added or removed (i.e. via code calling\n// `book.author.set(...)`), call this validation rule.\nconfig.addRule("books", (author) => {\n  if (author.books.get.length > 10) {\n    return "Too many books";\n  }\n});\n')),(0,a.kt)("p",null,"You can load/save entities in a Unit of Work-style ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityManager")," that will batch save any changes made during the current request (only after running all validation rules & updating any derived values):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1 = em.load(Author, "a:1");\na1.firstName = "Allen";\na2.lastName = "Zed";\n// Runs validation, lifecycle hooks, and issues INSERTs/UPDATEs\nawait em.flush();\n')),(0,a.kt)("p",null,"You can use GraphQL-style deep preloading to de-",(0,a.kt)("inlineCode",{parentName:"p"},"await")," business logic:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Use 1 await to preload a tree of data\nconst loaded = await a1.populate({\n  books: "reviews",\n  publisher: {},\n});\n\n// No more await Promise.all\nloaded.books.get.forEach((book) => {\n  book.reviews.get.forEach((review) => {\n    console.log(review.name);\n  });\n})\n')))}p.isMDXComponent=!0}}]);