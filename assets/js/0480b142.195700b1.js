"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[836],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(2685),a=(n(7378),n(5318));const o={title:"FAQ",position:10},i=void 0,s={unversionedId:"faq",id:"faq",title:"FAQ",description:"Does Joist have any gotchas?",source:"@site/docs/faq.md",sourceDirName:".",slug:"/faq",permalink:"/docs/faq",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/faq.md",tags:[],version:"current",frontMatter:{title:"FAQ",position:10},sidebar:"tutorialSidebar",previous:{title:"graphql-filters",permalink:"/docs/advanced/graphql-filters"},next:{title:"Test Factories",permalink:"/docs/testing/test-factories"}},p={},l=[{value:"Does Joist have any gotchas?",id:"does-joist-have-any-gotchas",level:2},{value:"Does Joist support <code>number</code> id fields?",id:"does-joist-support-number-id-fields",level:2},{value:"What databases does Joist support?",id:"what-databases-does-joist-support",level:2}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"does-joist-have-any-gotchas"},"Does Joist have any gotchas?"),(0,a.kt)("p",null,"Yes; while we've used Joist in production for 3 years, there are still a few gotchas (sharp edges) worth calling out:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"em.find")," queries should not be called in a loop."),(0,a.kt)("p",{parentName:"li"},"While Joist is fanatical about avoiding N+1s, today this only works for object graph navigation (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"await author.books.load()")," or similar ",(0,a.kt)("inlineCode",{parentName:"p"},"em.populate")," calls)."),(0,a.kt)("p",{parentName:"li"},"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"em.find")," queries issue custom SQL, Joist's current N+1 avoidance/auto-batching for them technically works, but produces fairly esoteric queries, and needs reworked, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/issues/441"},"move away from UNION ALL for batch em.finds")," which hopes to fix this."),(0,a.kt)("p",{parentName:"li"},"In practice, we've found it amenable to make ",(0,a.kt)("inlineCode",{parentName:"p"},"em.find")," queries only at the top-level of an endpoint or GraphQL mutation, and use object graph navigation for anything non-top-level.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Particularly complex reactive fields may miss updates, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/issues/626"},"expansion of complex transitive reactive hints")))),(0,a.kt)("h2",{id:"does-joist-support-number-id-fields"},"Does Joist support ",(0,a.kt)("inlineCode",{parentName:"h2"},"number")," id fields?"),(0,a.kt)("p",null,"Joist supports both ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"uuid")," primary key columns ",(0,a.kt)("em",{parentName:"p"},"in the database"),", but currently only supports exposing them as strings (i.e. tagged ids like ",(0,a.kt)("inlineCode",{parentName:"p"},'"a:1"')," or uuids like ",(0,a.kt)("inlineCode",{parentName:"p"},'"a:123e4567-e89b-12d3-a456-426614174000"'),")."),(0,a.kt)("p",null,"Supporting ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," columns exposed as JS ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),"s is doable, we just haven't needed it, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/issues/368"},"support number id columns"),"."),(0,a.kt)("h2",{id:"what-databases-does-joist-support"},"What databases does Joist support?"),(0,a.kt)("p",null,"Currently only Postgres; see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/issues/636"},"support other databases"),"."))}c.isMDXComponent=!0}}]);